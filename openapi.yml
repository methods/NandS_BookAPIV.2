# ---
openapi: 3.0.3 
# --------------------------------------------
# Info
info:
  title: Book Collection API
  version: v1.0.0
  description: A simple API to manage a collection of books.
  termsOfService: 'https://github.com/methods/NandS_BookAPIV.2'
  contact:
    email: booksAPI@example.com
  license:
    name: MIT License
    url: 'https://github.com/methods/NandS_BookAPIV.2/blob/main/LICENSE.md'

# --------------------------------------------
# Server
servers:
  - url: http://localhost:5000 
    description: Development server
    
# --------------------------------------------
# Tags
tags:
  - name: Books
    description: Operations related to books
    externalDocs:
      description: Find out more
      url: example.com

# --------------------------------------------
# Components
components:
  schemas:
    # Schema for the data client POSTs to create a book
    BookInput:
      type: object
      properties:
        title:
          type: string
          description: The title of the book.
          example: "The Hitchhiker's Guide to the Galaxy"
        synopsis:
          type: string
          description: A brief summary of the book.
          example: "Seconds before the Earth is demolished to make way for a galactic freeway..."
        author:
          type: string
          description: The author of the book.
          example: "Douglas Adams"
      required: # These fields are mandatory in the request body
        - title
        - synopsis
        - author

    # Schema for the HATEOAS links object generated by the server
    Links:
      type: object
      properties:
        self:
          type: string
          # format: uri 
          description: Link to the book resource itself.
          example: "/books/123e4567-e89b-12d3-a456-426614174000"
        reservations:
          type: string
          description: Link to reservations for this book.
          example: "/books/123e4567-e89b-12d3-a456-426614174000/reservations"
        reviews:
          type: string
          description: Link to reviews for this book.
          example: "/books/123e4567-e89b-12d3-a456-426614174000/reviews"
      required:
        - self
        - reservations
        - reviews

    # Schema for the full Book object as returned by the server
    BookOutput:
      allOf: # Inherits all properties from BookInput
        - $ref: '#/components/schemas/BookInput'
      type: object
      properties:
        id:
          type: string
          format: uuid 
          description: The unique identifier for the book (server-generated).
          readOnly: true 
          example: "123e4567-e89b-12d3-a456-426614174000"
        links:
          $ref: '#/components/schemas/Links' 
          readOnly: true 
      

    # Generic Error schema
    Error:
      type: object
      properties:
        error:
          type: string
          description: A message describing the error.
      required:
        - error
# --------------------------------------------
# Paths
paths:
  /books:
    post:
      tags:
        - Books
      summary: Add a new book
      description: Adds a new book to the collection. The server will generate a unique ID and HATEOAS links for the new book.
      operationId: addBook 
      requestBody:
        description: Book object that needs to be added to the store.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookInput' 
      responses:
        '201': 
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookOutput' 
        '400': 
          description: Invalid input provided or missing fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missingFields:
                  summary: Example of missing fields error
                  value:
                    error: "Missing required fields: title, synopsis"
                notADictionary:
                  summary: Example of payload not being a dictionary
                  value:
                    error: "JSON payload must be a dictionary"
                incorrectFieldTypeInternal:
                  summary: Example of internal field type validation error 
                  value:
                    error: "Field title is not of type <class 'str'>"
        '415': 
          description: Request payload is not JSON.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "Request must be JSON"
        '500':
          description: Internal Server Error. An unexpected error occurred on the server.
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/Error'
              example:
                error: "An unexpected error occurred."

